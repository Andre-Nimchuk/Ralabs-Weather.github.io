{"version":3,"sources":["Components/info.js","Components/form.js","Components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","value","onChange","placeholder","Weather","className","loading","city","country","temp","main","description","sunset","error","API_KEY","App","e","setState","inputValue","target","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","gettingWeather","a","preventDefault","elements","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","weather","undefined","state","lat","lon","geo_url","dataGeo","console","log","celcius","this","Math","round","loadin","then","position","gettingWeatherImmediately","coords","latitude","longitude","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c94681d8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Info = () => (\n    <div>\n        <div>\n            <h2>Weather info</h2>\n            <p>Find out the weather in your city!</p>\n        </div>\n    </div>\n);\n\nexport default Info;","import React from \"react\";\n\nconst Form = props => (\n    <form onSubmit={props.weatherMethod}>\n        <input type=\"text\" name=\"city\" value={props.value} onChange={props.onChange} placeholder=\"City\"/>\n        <button>Get weather information</button>\n    </form>\n);\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n        <div className=\"infoWeath\">\n        { (props.loading === false || props.city) ? \n        <div>\n            <p>Location: {props.city}, {props.country}</p>\n            <p>Temperature: {props.temp}</p>\n            <p>Weather details: {props.main}, {props.description}</p>\n            <p>Sunset: {props.sunset}</p>\n         </div> : \n         <h1>Wait few seconds your information download...</h1>}\n         <p className=\"error\">{props.error}</p>\n         </div>\n    );\n\nexport default Weather;","import React from \"react\";\nimport Info from \"./Components/info\";\nimport Form from \"./Components/form\";\nimport Weather from \"./Components/weather\";\n\nconst API_KEY = \"478ffc1c2cec1838455fe919452884e1\";\n\nclass App extends React.Component {\nconstructor(props) {\n  super(props);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      description: undefined,\n      main: undefined,\n      sunset: undefined,\n      loading: true,\n      inputValue: '',\n      error: undefined\n    };\n  }\n\n    onChange = (e) => {\n      this.setState({\n          inputValue: e.target.value\n      })\n    }\n\n    async gettingWeatherImmediately(lat, lon) {\n\n      const geo_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`);\n      const dataGeo = await geo_url.json();\n      console.log(dataGeo, 'GEO')\n      let sunset = dataGeo.sys.sunset;\n      let date = new Date(sunset * 1000);\n      let sunset_date = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n      // console.log(date1, 'date1')\n      // current date\n      /* let currentDate = new Date();\n      currentDate = currentDate.getUTCDate() + '.' + (currentDate.getUTCMonth() + 1) + '.' + currentDate.getUTCFullYear(); */\n      // console.log(currentDate) \n      let celcius = dataGeo.main.temp - 273\n\n      this.setState({\n          temp: Math.round(celcius),\n          city: dataGeo.name,\n          inputValue: dataGeo.name,\n          country: dataGeo.sys.country,\n          description: dataGeo.weather[0].description,\n          main: dataGeo.weather[0].main,\n          sunset: sunset_date,\n          // date: currentDate,\n          loadin: false,\n          error: undefined\n      })\n  }\n\n    componentDidMount() {\n      if (navigator.geolocation) {\n          this.getPosition()\n              .then((position) => {\n                  this.gettingWeatherImmediately(position.coords.latitude, position.coords.longitude);\n              })\n          navigator.geolocation.getCurrentPosition(async function (position) {\n              // const lat = position.coords.latitude;\n              // const lon = position.coords.longitude;\n              //     let city = 'lviv';\n              console.log(\"Latitude is: \", position.coords.latitude)\n              console.log(\"Longitude is: \", position.coords.longitude)\n              //     const geo_url = await fetch(https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric)\n              //     const dataGeo = await geo_url.json();\n              //     console.log(geo_url, 'GEO')\n          });\n      }\n  }\n\n    getPosition = (options) => {\n      return new Promise(function (resolve, reject) {\n          navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n  };\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    \n\n    if (city) {\n        const api_url = await \n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n        /* console.log(data); */\n        let sunset = data.sys.sunset;\n        let date = new Date();\n        date.setTime(sunset);\n        let sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        description: data.weather[0].description,\n        main: data.weather[0].main,\n        sunset: sunset_date,\n        error: undefined\n      });\n    } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          description: undefined,\n          main: undefined,\n          sunset: undefined,\n          error: \"Enter the city name\"\n        });\n      }\n   }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n             <div className=\"col-sm-5 info\">\n              <Info />\n             </div>\n              <div className=\"col-sm-7 form\">\n                <Form weatherMethod={this.gettingWeather} onChange={this.onChange} value={this.state.inputValue}/>\n                  <Weather \n                    temp={this.state.temp}\n                    city={this.state.city}\n                    loading={this.state.loading}\n                    country={this.state.country}\n                    description={this.state.description}\n                    main={this.state.main}\n                    sunset={this.state.sunset}\n                    loading={this.state.loading}\n                    error={this.state.error}\n                  />\n              </div>\n            </div>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}
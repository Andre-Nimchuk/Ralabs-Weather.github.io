[{"D:\\AllMyProject\\ralabsweather-master\\src\\index.js":"1","D:\\AllMyProject\\ralabsweather-master\\src\\reportWebVitals.js":"2","D:\\AllMyProject\\ralabsweather-master\\src\\App.js":"3","D:\\AllMyProject\\ralabsweather-master\\src\\Components\\info.js":"4","D:\\AllMyProject\\ralabsweather-master\\src\\Components\\form.js":"5","D:\\AllMyProject\\ralabsweather-master\\src\\Components\\weather.js":"6"},{"size":356,"mtime":1610909377000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610909377000,"results":"9","hashOfConfig":"8"},{"size":4889,"mtime":1610969169794,"results":"10","hashOfConfig":"8"},{"size":211,"mtime":1610917332927,"results":"11","hashOfConfig":"8"},{"size":285,"mtime":1610968608280,"results":"12","hashOfConfig":"8"},{"size":553,"mtime":1610928213023,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"vu8ihm",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\AllMyProject\\ralabsweather-master\\src\\index.js",[],["29","30"],"D:\\AllMyProject\\ralabsweather-master\\src\\reportWebVitals.js",[],"D:\\AllMyProject\\ralabsweather-master\\src\\App.js",["31"],"import React from \"react\";\nimport Info from \"./Components/info\";\nimport Form from \"./Components/form\";\nimport Weather from \"./Components/weather\";\n\nconst API_KEY = \"478ffc1c2cec1838455fe919452884e1\";\n\nclass App extends React.Component {\nconstructor(props) {\n  super(props);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      description: undefined,\n      main: undefined,\n      sunset: undefined,\n      loading: true,\n      inputValue: '',\n      error: undefined\n    };\n  }\n\n    onChange = (e) => {\n      this.setState({\n          inputValue: e.target.value\n      })\n    }\n\n    async gettingWeatherImmediately(lat, lon) {\n\n      const geo_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`);\n      const dataGeo = await geo_url.json();\n      console.log(dataGeo, 'GEO')\n      let sunset = dataGeo.sys.sunset;\n      let date = new Date(sunset * 1000);\n      let sunset_date = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n      // console.log(date1, 'date1')\n      // current date\n      /* let currentDate = new Date();\n      currentDate = currentDate.getUTCDate() + '.' + (currentDate.getUTCMonth() + 1) + '.' + currentDate.getUTCFullYear(); */\n      // console.log(currentDate) \n      let celcius = dataGeo.main.temp - 273\n\n      this.setState({\n          temp: Math.round(celcius),\n          city: dataGeo.name,\n          inputValue: dataGeo.name,\n          country: dataGeo.sys.country,\n          description: dataGeo.weather[0].description,\n          main: dataGeo.weather[0].main,\n          sunset: sunset_date,\n          // date: currentDate,\n          loadin: false,\n          error: undefined\n      })\n  }\n\n    componentDidMount() {\n      if (navigator.geolocation) {\n          this.getPosition()\n              .then((position) => {\n                  this.gettingWeatherImmediately(position.coords.latitude, position.coords.longitude);\n              })\n          navigator.geolocation.getCurrentPosition(async function (position) {\n              // const lat = position.coords.latitude;\n              // const lon = position.coords.longitude;\n              //     let city = 'lviv';\n              console.log(\"Latitude is: \", position.coords.latitude)\n              console.log(\"Longitude is: \", position.coords.longitude)\n              //     const geo_url = await fetch(https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric)\n              //     const dataGeo = await geo_url.json();\n              //     console.log(geo_url, 'GEO')\n          });\n      }\n  }\n\n    getPosition = (options) => {\n      return new Promise(function (resolve, reject) {\n          navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n  };\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    \n\n    if (city) {\n        const api_url = await \n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n        /* console.log(data); */\n        let sunset = data.sys.sunset;\n        let date = new Date();\n        date.setTime(sunset);\n        let sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        description: data.weather[0].description,\n        main: data.weather[0].main,\n        sunset: sunset_date,\n        error: undefined\n      });\n    } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          description: undefined,\n          main: undefined,\n          sunset: undefined,\n          error: \"Enter the city name\"\n        });\n      }\n   }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n             <div className=\"col-sm-5 info\">\n              <Info />\n             </div>\n              <div className=\"col-sm-7 form\">\n                <Form weatherMethod={this.gettingWeather} onChange={this.onChange} value={this.state.inputValue}/>\n                  <Weather \n                    temp={this.state.temp}\n                    city={this.state.city}\n                    loading={this.state.loading}\n                    country={this.state.country}\n                    description={this.state.description}\n                    main={this.state.main}\n                    sunset={this.state.sunset}\n                    loading={this.state.loading}\n                    error={this.state.error}\n                  />\n              </div>\n            </div>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","D:\\AllMyProject\\ralabsweather-master\\src\\Components\\info.js",[],["32","33"],"D:\\AllMyProject\\ralabsweather-master\\src\\Components\\form.js",[],"D:\\AllMyProject\\ralabsweather-master\\src\\Components\\weather.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":140,"column":21,"nodeType":"40","endLine":140,"endColumn":49},{"ruleId":"34","replacedBy":"41"},{"ruleId":"36","replacedBy":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["43"],["44"],"no-global-assign","no-unsafe-negation"]